// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserLink is an object representing the database table.
type UserLink struct {
	LinkID   string    `boil:"link_id" json:"link_id" toml:"link_id" yaml:"link_id"`
	UserID   int64     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Category string    `boil:"category" json:"category" toml:"category" yaml:"category"`
	Hidden   bool      `boil:"hidden" json:"hidden" toml:"hidden" yaml:"hidden"`
	Link     string    `boil:"link" json:"link" toml:"link" yaml:"link"`
	Headline string    `boil:"headline" json:"headline" toml:"headline" yaml:"headline"`
	Added    time.Time `boil:"added" json:"added" toml:"added" yaml:"added"`

	R *userLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserLinkColumns = struct {
	LinkID   string
	UserID   string
	Category string
	Hidden   string
	Link     string
	Headline string
	Added    string
}{
	LinkID:   "link_id",
	UserID:   "user_id",
	Category: "category",
	Hidden:   "hidden",
	Link:     "link",
	Headline: "headline",
	Added:    "added",
}

var UserLinkTableColumns = struct {
	LinkID   string
	UserID   string
	Category string
	Hidden   string
	Link     string
	Headline string
	Added    string
}{
	LinkID:   "user_links.link_id",
	UserID:   "user_links.user_id",
	Category: "user_links.category",
	Hidden:   "user_links.hidden",
	Link:     "user_links.link",
	Headline: "user_links.headline",
	Added:    "user_links.added",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var UserLinkWhere = struct {
	LinkID   whereHelperstring
	UserID   whereHelperint64
	Category whereHelperstring
	Hidden   whereHelperbool
	Link     whereHelperstring
	Headline whereHelperstring
	Added    whereHelpertime_Time
}{
	LinkID:   whereHelperstring{field: "\"user_links\".\"link_id\""},
	UserID:   whereHelperint64{field: "\"user_links\".\"user_id\""},
	Category: whereHelperstring{field: "\"user_links\".\"category\""},
	Hidden:   whereHelperbool{field: "\"user_links\".\"hidden\""},
	Link:     whereHelperstring{field: "\"user_links\".\"link\""},
	Headline: whereHelperstring{field: "\"user_links\".\"headline\""},
	Added:    whereHelpertime_Time{field: "\"user_links\".\"added\""},
}

// UserLinkRels is where relationship names are stored.
var UserLinkRels = struct {
}{}

// userLinkR is where relationships are stored.
type userLinkR struct {
}

// NewStruct creates a new relationship struct
func (*userLinkR) NewStruct() *userLinkR {
	return &userLinkR{}
}

// userLinkL is where Load methods for each relationship are stored.
type userLinkL struct{}

var (
	userLinkAllColumns            = []string{"link_id", "user_id", "category", "hidden", "link", "headline", "added"}
	userLinkColumnsWithoutDefault = []string{"link_id", "user_id", "link", "headline", "added"}
	userLinkColumnsWithDefault    = []string{"category", "hidden"}
	userLinkPrimaryKeyColumns     = []string{"link_id"}
	userLinkGeneratedColumns      = []string{}
)

type (
	// UserLinkSlice is an alias for a slice of pointers to UserLink.
	// This should almost always be used instead of []UserLink.
	UserLinkSlice []*UserLink
	// UserLinkHook is the signature for custom UserLink hook methods
	UserLinkHook func(boil.Executor, *UserLink) error

	userLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userLinkType                 = reflect.TypeOf(&UserLink{})
	userLinkMapping              = queries.MakeStructMapping(userLinkType)
	userLinkPrimaryKeyMapping, _ = queries.BindMapping(userLinkType, userLinkMapping, userLinkPrimaryKeyColumns)
	userLinkInsertCacheMut       sync.RWMutex
	userLinkInsertCache          = make(map[string]insertCache)
	userLinkUpdateCacheMut       sync.RWMutex
	userLinkUpdateCache          = make(map[string]updateCache)
	userLinkUpsertCacheMut       sync.RWMutex
	userLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userLinkAfterSelectMu sync.Mutex
var userLinkAfterSelectHooks []UserLinkHook

var userLinkBeforeInsertMu sync.Mutex
var userLinkBeforeInsertHooks []UserLinkHook
var userLinkAfterInsertMu sync.Mutex
var userLinkAfterInsertHooks []UserLinkHook

var userLinkBeforeUpdateMu sync.Mutex
var userLinkBeforeUpdateHooks []UserLinkHook
var userLinkAfterUpdateMu sync.Mutex
var userLinkAfterUpdateHooks []UserLinkHook

var userLinkBeforeDeleteMu sync.Mutex
var userLinkBeforeDeleteHooks []UserLinkHook
var userLinkAfterDeleteMu sync.Mutex
var userLinkAfterDeleteHooks []UserLinkHook

var userLinkBeforeUpsertMu sync.Mutex
var userLinkBeforeUpsertHooks []UserLinkHook
var userLinkAfterUpsertMu sync.Mutex
var userLinkAfterUpsertHooks []UserLinkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserLink) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserLink) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserLink) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserLink) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserLink) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserLink) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserLink) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserLink) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserLink) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserLinkHook registers your hook function for all future operations.
func AddUserLinkHook(hookPoint boil.HookPoint, userLinkHook UserLinkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userLinkAfterSelectMu.Lock()
		userLinkAfterSelectHooks = append(userLinkAfterSelectHooks, userLinkHook)
		userLinkAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userLinkBeforeInsertMu.Lock()
		userLinkBeforeInsertHooks = append(userLinkBeforeInsertHooks, userLinkHook)
		userLinkBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userLinkAfterInsertMu.Lock()
		userLinkAfterInsertHooks = append(userLinkAfterInsertHooks, userLinkHook)
		userLinkAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userLinkBeforeUpdateMu.Lock()
		userLinkBeforeUpdateHooks = append(userLinkBeforeUpdateHooks, userLinkHook)
		userLinkBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userLinkAfterUpdateMu.Lock()
		userLinkAfterUpdateHooks = append(userLinkAfterUpdateHooks, userLinkHook)
		userLinkAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userLinkBeforeDeleteMu.Lock()
		userLinkBeforeDeleteHooks = append(userLinkBeforeDeleteHooks, userLinkHook)
		userLinkBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userLinkAfterDeleteMu.Lock()
		userLinkAfterDeleteHooks = append(userLinkAfterDeleteHooks, userLinkHook)
		userLinkAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userLinkBeforeUpsertMu.Lock()
		userLinkBeforeUpsertHooks = append(userLinkBeforeUpsertHooks, userLinkHook)
		userLinkBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userLinkAfterUpsertMu.Lock()
		userLinkAfterUpsertHooks = append(userLinkAfterUpsertHooks, userLinkHook)
		userLinkAfterUpsertMu.Unlock()
	}
}

// One returns a single userLink record from the query.
func (q userLinkQuery) One(exec boil.Executor) (*UserLink, error) {
	o := &UserLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_links")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserLink records from the query.
func (q userLinkQuery) All(exec boil.Executor) (UserLinkSlice, error) {
	var o []*UserLink

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserLink slice")
	}

	if len(userLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserLink records in the query.
func (q userLinkQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_links rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userLinkQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_links exists")
	}

	return count > 0, nil
}

// UserLinks retrieves all the records using an executor.
func UserLinks(mods ...qm.QueryMod) userLinkQuery {
	mods = append(mods, qm.From("\"user_links\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_links\".*"})
	}

	return userLinkQuery{q}
}

// FindUserLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserLink(exec boil.Executor, linkID string, selectCols ...string) (*UserLink, error) {
	userLinkObj := &UserLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_links\" where \"link_id\"=?", sel,
	)

	q := queries.Raw(query, linkID)

	err := q.Bind(nil, exec, userLinkObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_links")
	}

	if err = userLinkObj.doAfterSelectHooks(exec); err != nil {
		return userLinkObj, err
	}

	return userLinkObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserLink) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_links provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userLinkInsertCacheMut.RLock()
	cache, cached := userLinkInsertCache[key]
	userLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userLinkAllColumns,
			userLinkColumnsWithDefault,
			userLinkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userLinkType, userLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userLinkType, userLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_links\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_links\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_links")
	}

	if !cached {
		userLinkInsertCacheMut.Lock()
		userLinkInsertCache[key] = cache
		userLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the UserLink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserLink) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	userLinkUpdateCacheMut.RLock()
	cache, cached := userLinkUpdateCache[key]
	userLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userLinkAllColumns,
			userLinkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update user_links, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_links\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, userLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userLinkType, userLinkMapping, append(wl, userLinkPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update user_links row")
	}

	if !cached {
		userLinkUpdateCacheMut.Lock()
		userLinkUpdateCache[key] = cache
		userLinkUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userLinkQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for user_links")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserLinkSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userLinkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in userLink slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserLink) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_links provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userLinkUpsertCacheMut.RLock()
	cache, cached := userLinkUpsertCache[key]
	userLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userLinkAllColumns,
			userLinkColumnsWithDefault,
			userLinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userLinkAllColumns,
			userLinkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_links, could not build update column list")
		}

		ret := strmangle.SetComplement(userLinkAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userLinkPrimaryKeyColumns))
			copy(conflict, userLinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"user_links\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userLinkType, userLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userLinkType, userLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_links")
	}

	if !cached {
		userLinkUpsertCacheMut.Lock()
		userLinkUpsertCache[key] = cache
		userLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single UserLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserLink) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"user_links\" WHERE \"link_id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from user_links")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q userLinkQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("models: no userLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from user_links")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserLinkSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	if len(userLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userLinkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userLink slice")
	}

	if len(userLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserLink) Reload(exec boil.Executor) error {
	ret, err := FindUserLink(exec, o.LinkID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserLinkSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_links\".* FROM \"user_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserLinkSlice")
	}

	*o = slice

	return nil
}

// UserLinkExists checks if the UserLink row exists.
func UserLinkExists(exec boil.Executor, linkID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_links\" where \"link_id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, linkID)
	}
	row := exec.QueryRow(sql, linkID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_links exists")
	}

	return exists, nil
}

// Exists checks if the UserLink row exists.
func (o *UserLink) Exists(exec boil.Executor) (bool, error) {
	return UserLinkExists(exec, o.LinkID)
}
